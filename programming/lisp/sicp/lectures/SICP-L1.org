# -*- mode: org; org-confirm-babel-evaluate: nil -*-

#+TITLE: SICP Lecture 1
#+AUTHOR: Paul Bartholomew

#+LATEX_HEADER: \hypersetup{colorlinks}
#+LATEX_HEADER: \usepackage{fullpage}

* Overview: Introduction to Lisp

#+BEGIN_QUOTE
Computer science is a terrible name for this business.
First of all it is not a science - it might be engineering or it might be art...
It's also not really very much about computers, and it's not about computers in the same sense that
physics is not really about particle accelerators and biology is not really about microscopes and
petri dishes. -- Harold Abelson
#+END_QUOTE

** Introduction

Computer science is to computers as gemoetry is to surveying - the former formalises an idea whilst
the latter applies it.
With computer science it is about formalising a `process' i.e. /how to do things/.
A process is a form of `imperative knowledge', to be contrasted with mathematical statements which
are `declarative knowledge' /i.e./ expressing the /what/ of some truth.
For example the statement: $\sqrt{x}$ is the $y$ such that $y^2 = x$ and $y \geq 0$.
describes precisely what the square root is, without informing how to compute it.
By contrast, the `imperative knowledge' of a process concerns /how to/ find the square root of $x$,
for example by successive averaging:
- Make an initial guess $g$
- Improve the guess by averaging $g$ and $x/g$
- Keep improving the guess until it is good enough
this is a method/process as opposed to the declarative knowledge we encountered earlier.
The description of these processes are procedures.

The essence of computer science is how to formalise processes - the problem is how to control the
complexity of large systems.
Unlike in other areas of engineering such as the design of a `million stage amplifier', which must
also deal with complexity, in computer science we deal with idealised systems, unconstrained by the
limitations of real components, whereas in the case of the amplifier the thermal noise of the
components would be amplified to the point of overwhelming the signal making it useless.

One approach to dealing with complexity is `black box' abstraction - taking an idea and placing a
box around it, for example the square root method might be represented as:
#+BEGIN_LATEX
  \begin{equation}
    x \rightarrow SQRT\left(x\right) \rightarrow y
  \end{equation}
#+END_LATEX
where we don't need to understand/know what is happening between the arrows: simply we input $x$ and
our black box returns $y$, the square root of $x$.
By using black box abstraction we suppress detail, allowing us to focus on the bigger picture or
build bigger boxes.

Another reason for using black box abstraction is if our procedure is a specific instance of a more
general idea and we'd like to express this generality.
Returning to the procedure for finding a square root, we can see it is a specific case of finding
the fixed point of a function, defined as a value $y$ such that $f \left( y \right) = y$; a
procedure for which might look like:
- Start with an initial guess $y_0$
- Keep applying $y_{n+1}=f\left(y_{n}\right)$ over and over until $y_{n+1}\approx{}y_n$
so to find $\sqrt{x}$, find a fixed point of the function
#+BEGIN_LATEX
  \begin{equation}
    f \left( y \right) = \frac{y + x/y}{2} \ ,
  \end{equation}
#+END_LATEX
So a more useful abstraction might be ~fixed-point~ which returns the fixed point of a given function
as input.

** Framework of a Computer Language

A general framework for thinking about languages is:
- What are the primitive elements - what does the language provide?
- How do I put these elements together - what are the means of combination?
- What are the means of abstraction - how to take these complicated things and put them in a box
  that we can treat as a primitive element from a higher level?

*** Primitives

=Lisp= has some primitive data and procedures:
- ~3~ the number 3 - or specfically a symbol representing the number `three'
- ~+~ the addition procedure - or a name representing the procedure the adding things
we can use these in a `combination' to compute a sum:
#+BEGIN_SRC lisp
  (+ 3 17.4 5)
#+END_SRC

*** Means of Combination

A /combination/ consists of applying an /operator/ (~+~) to some /operands/ (~3~ ~17.4~ ~5~).
Crucially these operands may themselves be combinations /e.g./
#+BEGIN_SRC lisp
  (+ 3 (* 5 6) 8 2)
#+END_SRC

These combinations can be visualised as trees
#+BEGIN_EXAMPLE 
   ._____
 / | \ \ \
+  3  . 8 2
    / | \
   *  5  6
#+END_EXAMPLE
and the way parentheses are used in ~Lisp~ allow us to write these 2D tree structures as 1D character
strings.

*** Means of Abstraction

Given a means of combination, we want to be able to take some combination and
abstract it by assigning it a name[fn:cl-vs-scheme], for example
#+NAME: l1-example-var
#+BEGIN_SRC lisp
  (defvar *a* (* 5 5))
#+END_SRC
and then use it as an element in another procedure
#+BEGIN_SRC lisp :noweb strip-export
  <<l1-example-var>>
  (* *a* *a*)
#+END_SRC
and we can even use it to build yet more complex combinations
#+BEGIN_SRC lisp :noweb strip-export
  <<l1-example-var>>
  (defvar *b* (+ *a* (* 5 *a*)))
#+END_SRC

Whilst it is very important to be able to create variables, even more powerful is the ability to
name the idea of /doing something/, for example multiplying a number by itself:
#+BEGIN_EXAMPLE
To square something: multiply it by itself
#+END_EXAMPLE
or in code:
#+NAME: square
#+BEGIN_SRC lisp 
  (defun sq (x)
    (* x x))
#+END_SRC
in reality, this is associating the symbol ~sq~ with the function ~(lambda (x) (* x x))~, ~defun~ is just
/syntactic sugar/ for this.

We can combine these abstractions to generate yet more complex ones:
#+NAME: avg
#+BEGIN_SRC lisp
  (defun avg (x y)
    (/ (+ x y) 2))
#+END_SRC
#+BEGIN_SRC lisp :noweb strip-export
  <<square>>
  <<avg>>
  (defun mean-sq (x y)
    (avg (sq x) (sq y)))
#+END_SRC
the key thing is we can now use ~sq~ /as if it were a language primitive/, in ~mean-sq~ the definition of
~sq~ is /below the level of abstraction we are dealing with/ - we don't have to worry about /how/ it
works, only that it does return the square of a number.

Another important language feature is case analysis, for example the absolute value of a number:
#+BEGIN_LATEX
  \begin{equation}
    abs \left( x \right) =
    \begin{cases}
      -x & x < 0 \\
      0 & x = 0 \\
      x & x > 0
    \end{cases}
  \end{equation}
#+END_LATEX
in code:
#+BEGIN_SRC lisp
  (defun abs (x)
    (cond ((< x 0)
           (- x))
          ((= x 0) 0)
          ((> x 0) x)))
#+END_SRC
note the similarity between the code and the mathematical description.
A simpler procedure definition would be:
#+BEGIN_SRC lisp
  (defun abs (x)
    (if (< x 0)
        (- x)
        x))
#+END_SRC
we have reduced 3 predicate tests to 1.

*** Example: A Procedure to Compute Square Roots

Returning to the square root, we can now look at how to define a procedure for computing $\sqrt{x}$
using successive averaging:
- Make an initial guess
- Improve the guess by averaging
- Keep improving the guess until it is good enough
- Use 1 as an initial guess
in code:
#+BEGIN_SRC lisp :noweb strip-export
  <<square>>
  <<avg>>

  (defun my-sqrt (x &optional (guess 1.0))
    (if (good-enoughp guess x)
        guess
        (my-sqrt x (improve guess x))))

  (defun improve (guess x)
    (avg guess (/ x guess)))

  (defun good-enoughp (guess x)
    (< (abs (- (sq guess) x))
       0.001))
#+END_SRC

We can substitute in ~2~ for the value of ~x~ to see how this procedure evolves:

This is a /recursive/ definition: ~my-sqrt~ calls itself.

A problem with ~my-sqrt~ is that the concepts of ~improve~ and ~good-enoughp~ are /external/ to ~my-sqrt~ and
/specialised/ to it, preventing these symbols being used elsewhere.
We can /package/ these symbols within ~my-sqrt~:[fn:cl-labels]
#+BEGIN_SRC lisp :noweb strip-export
  <<square>>
  <<avg>>
  (defun my-sqrt (x &optional (tol 0.001))
    (labels
        (;; Method to improve our guess.
         (improve (guess)
           (avg guess (/ x guess)))
         ;; Method to check our guess.
         (good-enoughp (guess)
           (< (abs (- (sq guess) x))
              tol))
         ;; Try our current guess,
         ;; if not good enough try again with improved guess.
         (try (guess)
           (if (good-enoughp guess)
               guess
               (try (improve guess)))))

      ;; Start with initial guess of 1.
      (try 1)))
#+END_SRC

#+RESULTS:
: MY-SQRT

This style of coding - packaging internal details within a definition - is known as /block-structure/.

[fn:cl-vs-scheme] Here there is a distinction between =Common Lisp= and =Scheme=: as a =Lisp-1=, =Scheme=
makes no difference between variable and function definitions, using ~define~ for both; whilst =Common
Lisp= as a =Lisp-2= does, using ~defvar~ and ~defun~ respectively.
This has some important consequences such as how to pass functions as arguments and call arguments
as functions.

[fn:cl-labels] Note the need to use ~labels~ - this is because in =Common Lisp= the ~defun~ macro creates
a /top-level/ form.
This is simpler in =Scheme= where once again we could simply use ~define~.

** Summary

We can summarise what we've seen here by the following table

|----------------------+-----------------------------+-----------|
|                      | Procedures                  | Data      |
|----------------------+-----------------------------+-----------|
| Primitive elements   | ~+~ ~*~ ~<~ ~=~ [fn:implementation] | ~23~, ~1.738~ |
| Means of combination | ~()~ /composition/              |           |
|                      | ~cond~, ~if~                    |           |
| Means of abstraction | ~defun~                       |           |
|                      | ~defvar~                      |           |
|----------------------+-----------------------------+-----------|


[fn:implementation] Note that in the =Lisp= implementation ~+~, ~*~, /etc./ are probably not actually
primitives but may usefully be treated as such.
